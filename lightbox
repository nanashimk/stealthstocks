import React from "react";
import { Button } from "@/components/ui/button";
import { X, ChevronLeft, ChevronRight, Plus } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export default function Lightbox({ product, imageIndex, onClose, onAddToCart, onImageChange }) {
  const handlePrev = () => {
    onImageChange((imageIndex - 1 + product.images.length) % product.images.length);
  };

  const handleNext = () => {
    onImageChange((imageIndex + 1) % product.images.length);
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="fixed inset-0 z-50 bg-black/90 backdrop-blur-sm flex items-center justify-center p-4"
      onClick={onClose}
    >
      <div className="relative w-full max-w-6xl h-full max-h-[90vh] flex items-center justify-center" onClick={(e) => e.stopPropagation()}>
        <Button
          variant="ghost"
          size="icon"
          className="absolute top-4 right-4 z-10 bg-white/90 hover:bg-white rounded-full w-12 h-12"
          onClick={onClose}
        >
          <X className="w-6 h-6" />
        </Button>

        <div className="absolute top-4 left-4 z-10 bg-black/70 text-white px-4 py-2 rounded-full text-sm font-medium">
          {imageIndex + 1} / {product.images.length}
        </div>

        {product.images.length > 1 && (
          <Button
            variant="ghost"
            size="icon"
            className="absolute left-4 z-10 bg-white/90 hover:bg-white rounded-full w-12 h-12"
            onClick={handlePrev}
          >
            <ChevronLeft className="w-6 h-6" />
          </Button>
        )}

        <AnimatePresence mode="wait">
          <motion.img
            key={imageIndex}
            src={product.images[imageIndex]}
            alt={product.title}
            referrerPolicy="no-referrer"
            className="max-w-full max-h-full object-contain rounded-2xl"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            transition={{ duration: 0.2 }}
            onError={(e) => {
              e.target.style.opacity = '0.3';
              e.target.style.background = 'linear-gradient(135deg, #374151 0%, #1f2937 100%)';
              e.target.style.minHeight = '400px';
              e.target.style.minWidth = '400px';
            }}
          />
        </AnimatePresence>

        {product.images.length > 1 && (
          <Button
            variant="ghost"
            size="icon"
            className="absolute right-4 z-10 bg-white/90 hover:bg-white rounded-full w-12 h-12"
            onClick={handleNext}
          >
            <ChevronRight className="w-6 h-6" />
          </Button>
        )}

        <div className="absolute bottom-4 left-1/2 -translate-x-1/2 z-10 bg-white/95 backdrop-blur-sm rounded-2xl shadow-2xl p-4 flex items-center gap-4">
          <div>
            <h3 className="font-bold text-lg">{product.title}</h3>
            <p className="text-2xl font-bold text-blue-600">{product.price}â‚¬</p>
          </div>
          <Button
            onClick={() => {
              onAddToCart(product);
              onClose();
            }}
            className="rounded-full gap-2 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700"
          >
            <Plus className="w-5 h-5" />
            Ajouter au panier
          </Button>
        </div>

        {product.images.length > 1 && (
          <div className="absolute bottom-24 left-1/2 -translate-x-1/2 z-10 flex gap-2 bg-black/50 backdrop-blur-sm p-2 rounded-full max-w-full overflow-x-auto">
            {product.images.map((img, idx) => (
              <button
                key={idx}
                onClick={() => onImageChange(idx)}
                className={`w-12 h-12 rounded-lg overflow-hidden border-2 transition-all flex-shrink-0 ${
                  idx === imageIndex ? 'border-blue-400 scale-110' : 'border-white/30 hover:border-white/60'
                }`}
              >
                <img 
                  src={img} 
                  alt="" 
                  referrerPolicy="no-referrer"
                  className="w-full h-full object-cover"
                  onError={(e) => {
                    e.target.style.opacity = '0.3';
                    e.target.style.background = '#4b5563';
                  }}
                />
              </button>
            ))}
          </div>
        )}
      </div>
    </motion.div>
  );
}
